name: Build Docker for Windows ARM64

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        go-version: [1.21, 1.22, 1.23]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential zip

    - name: Setup environment
      run: |
        chmod +x scripts/*.sh

    - name: Validate environment
      run: |
        go version
        echo "GOOS=windows GOARCH=arm64" >> $GITHUB_ENV

    - name: Build Docker CLI
      run: |
        # Clone Docker CLI source
        git clone --depth 1 https://github.com/docker/cli.git docker-cli
        cd docker-cli

        # Setup go.mod from vendor.mod
        cp vendor.mod go.mod

        # Build for Windows ARM64
        GOOS=windows GOARCH=arm64 go build \
          -mod=vendor \
          -ldflags "-X github.com/docker/cli/cli/version.GitCommit=$(git rev-parse --short HEAD) \
                    -X github.com/docker/cli/cli/version.BuildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ) \
                    -X github.com/docker/cli/cli/version.Version=$(git describe --tags --always)" \
          -o ../build/docker-windows-arm64.exe \
          ./cmd/docker

    - name: Build Docker Engine
      run: |
        # Clone Docker Engine source
        git clone --depth 1 https://github.com/moby/moby.git docker-engine
        cd docker-engine

        # Build for Windows ARM64
        GOOS=windows GOARCH=arm64 go build \
          -o ../build/dockerd-windows-arm64.exe \
          ./cmd/dockerd

    - name: Verify binaries
      run: |
        ls -la build/
        file build/*.exe || echo "file command not available"

        # Check that files are not empty
        if [ ! -s build/docker-windows-arm64.exe ]; then
          echo "Error: Docker CLI binary is empty"
          exit 1
        fi

        if [ ! -s build/dockerd-windows-arm64.exe ]; then
          echo "Error: Docker Engine binary is empty"
          exit 1
        fi

        echo "Build verification passed"

    - name: Create build info
      run: |
        cat > build/build-info.txt << EOF
        Docker for Windows ARM64 - Build Information
        ==========================================

        Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        Build Host: $(hostname)
        Go Version: $(go version)
        Git Commit: ${{ github.sha }}
        Git Ref: ${{ github.ref }}

        Docker CLI:
          Source: https://github.com/docker/cli.git
          Commit: $(cd docker-cli && git rev-parse HEAD)
          Version: $(cd docker-cli && git describe --tags --always)

        Docker Engine:
          Source: https://github.com/moby/moby.git
          Commit: $(cd docker-engine && git rev-parse HEAD)
          Version: $(cd docker-engine && git describe --tags --always)

        Build Configuration:
          GOOS: windows
          GOARCH: arm64
          CGO_ENABLED: 0
        EOF

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: docker-windows-arm64-${{ matrix.go-version }}-${{ github.sha }}
        path: |
          build/docker-windows-arm64.exe
          build/dockerd-windows-arm64.exe
          build/build-info.txt
        retention-days: 30

    - name: Upload to releases (on main branch)
      if: github.ref == 'refs/heads/main' && matrix.go-version == '1.23'
      uses: actions/upload-artifact@v3
      with:
        name: docker-windows-arm64-latest
        path: |
          build/docker-windows-arm64.exe
          build/dockerd-windows-arm64.exe
          build/build-info.txt

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: docker-windows-arm64-1.23-${{ github.sha }}
        path: build/

    - name: Test cross-compilation
      run: |
        echo "Testing cross-compilation capabilities..."

        # Create a simple test program
        cat > test.go << 'EOF'
        package main

        import (
            "fmt"
            "runtime"
        )

        func main() {
            fmt.Printf("Hello from %s/%s\n", runtime.GOOS, runtime.GOARCH)
        }
        EOF

        # Test Windows ARM64 compilation
        GOOS=windows GOARCH=arm64 go build -o test-windows-arm64.exe test.go

        if [ -f test-windows-arm64.exe ]; then
          echo "✓ Cross-compilation test passed"
        else
          echo "✗ Cross-compilation test failed"
          exit 1
        fi

    - name: Validate binary sizes
      run: |
        echo "Validating binary sizes..."

        CLI_SIZE=$(stat -c%s build/docker-windows-arm64.exe)
        ENGINE_SIZE=$(stat -c%s build/dockerd-windows-arm64.exe)

        echo "Docker CLI size: $CLI_SIZE bytes"
        echo "Docker Engine size: $ENGINE_SIZE bytes"

        # Basic size validation (should be larger than 1MB)
        if [ $CLI_SIZE -lt 1048576 ]; then
          echo "Error: Docker CLI binary too small"
          exit 1
        fi

        if [ $ENGINE_SIZE -lt 1048576 ]; then
          echo "Error: Docker Engine binary too small"
          exit 1
        fi

        echo "✓ Binary size validation passed"

  security-scan:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'